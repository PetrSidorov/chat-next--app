// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// TODO: it would be cool to use enums for status in "conversation" model.
// Look up what are possible solutions to use them or it's better just to
// handle it on the application level
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String
  username              String         @unique
  password              String
  email                 String         @unique
  emailVerified         DateTime?
  image                 String?
  sessions              UserSession[]
  sentMessages          Message[]      @relation("MessageToUser")
  receivedMessages      Message[]      @relation("MessageFromUser")
  initiatedConversation Conversation[] @relation("ConversationToInitiator")
  joinedConversations   Conversation[] @relation("ConversationToJoiner")
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  joinerId    String
  initiator   User      @relation("ConversationToInitiator", fields: [initiatorId], references: [id])
  joiner      User      @relation("ConversationToJoiner", fields: [joinerId], references: [id])
  messages    Message[]
  status      String
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  senderId       String
  receiverId     String
  conversationId String
  sender         User         @relation("MessageToUser", fields: [senderId], references: [id])
  receiver       User         @relation("MessageFromUser", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
